{"version":3,"sources":["../../src/components/Link/Link.base.tsx","../../src/components/Link/Link.styles.ts","../../src/components/Link/Link.tsx","Menu/index.js"],"names":["getClassNames","classNamesFunction","props","_link","_onClick","ev","onClick","disabled","preventDefault","initializeComponentRef","render","children","className","href","theme","styles","keytipProps","classNames","isButton","isDisabled","RootType","this","_getRootType","KeytipData","ariaDescribedBy","keytipAttributes","_adjustPropsForRootType","root","ref","focus","current","as","target","getStyles","componentRef","undefined","restProps","type","GlobalClassNames","Link","styled","semanticColors","linkColor","link","linkInteractedColor","linkHovered","linkDisabledColor","disabledText","focusBorderColor","focusBorder","fonts","medium","color","outline","fontSize","fontWeight","textDecoration","selectors","boxShadow","borderBottom","background","backgroundColor","border","cursor","display","margin","overflow","padding","textAlign","textOverflow","userSelect","pointerEvents","scope","MenuStyled","div","MenuItemStyled","isSelected","prop","isCollapsed","Menu","translate","useTranslate","routes","map","route","key","name","path","TooltipHost","content","title","calloutProps","directionalHint","DirectionalHint","rightCenter","Icon","style","iconName"],"mappings":"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","file":"static/js/3.17fcd62c.chunk.js","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, initializeComponentRef } from '../../Utilities';\nimport { ILink, ILinkProps, ILinkStyleProps, ILinkStyles } from './Link.types';\nimport { KeytipData } from '../../KeytipData';\n\nconst getClassNames = classNamesFunction<ILinkStyleProps, ILinkStyles>();\n\nexport class LinkBase extends React.Component<ILinkProps, {}> implements ILink {\n  private _link = React.createRef<HTMLAnchorElement | HTMLButtonElement | null>();\n\n  constructor(props: ILinkProps) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const { disabled, children, className, href, theme, styles, keytipProps } = this.props;\n\n    const classNames = getClassNames(styles!, {\n      className,\n      isButton: !href,\n      isDisabled: disabled,\n      theme: theme!,\n    });\n\n    const RootType = this._getRootType(this.props);\n\n    return (\n      <KeytipData\n        keytipProps={keytipProps}\n        ariaDescribedBy={(this.props as { 'aria-describedby': string })['aria-describedby']}\n        disabled={disabled}\n      >\n        {(keytipAttributes: any): JSX.Element => (\n          <RootType\n            {...keytipAttributes}\n            {...this._adjustPropsForRootType(RootType, this.props)}\n            className={classNames.root}\n            onClick={this._onClick}\n            ref={this._link}\n            aria-disabled={disabled}\n          >\n            {children}\n          </RootType>\n        )}\n      </KeytipData>\n    );\n  }\n\n  public focus() {\n    const { current } = this._link;\n\n    if (current && current.focus) {\n      current.focus();\n    }\n  }\n\n  private _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    const { onClick, disabled } = this.props;\n\n    if (disabled) {\n      ev.preventDefault();\n    } else if (onClick) {\n      onClick(ev);\n    }\n  };\n\n  private _adjustPropsForRootType(\n    RootType: string | React.ComponentClass | React.FunctionComponent,\n    props: ILinkProps & { getStyles?: any },\n  ): Partial<ILinkProps> {\n    // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n    // as those will always be removed. We also take some props that are optional\n    // based on the RootType.\n    const { children, as, disabled, target, href, theme, getStyles, styles, componentRef, ...restProps } = props;\n\n    // RootType will be a string if we're dealing with an html component\n    if (typeof RootType === 'string') {\n      // Remove the disabled prop for anchor elements\n      if (RootType === 'a') {\n        return {\n          target,\n          href: disabled ? undefined : href,\n          ...restProps,\n        };\n      }\n\n      // Add the type='button' prop for button elements\n      if (RootType === 'button') {\n        return {\n          type: 'button',\n          disabled,\n          ...restProps,\n        };\n      }\n\n      // Remove the target and href props for all other non anchor elements\n      return { ...restProps, disabled };\n    }\n\n    // Retain all props except 'as' for ReactComponents\n    return { target, href, disabled, ...restProps };\n  }\n\n  private _getRootType(props: ILinkProps): string | React.ComponentClass | React.FunctionComponent {\n    if (props.as) {\n      return props.as;\n    }\n\n    if (props.href) {\n      return 'a';\n    }\n\n    return 'button';\n  }\n}\n","import {\n  getGlobalClassNames,\n  HighContrastSelectorWhite,\n  HighContrastSelectorBlack,\n  HighContrastSelector,\n} from '../../Styling';\nimport { ILinkStyleProps, ILinkStyles } from './Link.types';\n\nconst GlobalClassNames = {\n  root: 'ms-Link',\n};\n\nexport const getStyles = (props: ILinkStyleProps): ILinkStyles => {\n  const { className, isButton, isDisabled, theme } = props;\n  const { semanticColors } = theme;\n\n  // Tokens\n  const linkColor = semanticColors.link;\n  const linkInteractedColor = semanticColors.linkHovered;\n  const linkDisabledColor = semanticColors.disabledText;\n  const focusBorderColor = semanticColors.focusBorder;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        color: linkColor,\n        outline: 'none',\n        fontSize: 'inherit',\n        fontWeight: 'inherit',\n        textDecoration: 'none',\n\n        selectors: {\n          '.ms-Fabric--isFocusVisible &:focus': {\n            // Can't use getFocusStyle because it doesn't support wrapping links\n            // https://github.com/microsoft/fluentui/issues/4883#issuecomment-406743543\n            // Using box-shadow and outline allows the focus rect to wrap links that span multiple lines\n            // and helps the focus rect avoid getting clipped.\n            boxShadow: `0 0 0 1px ${focusBorderColor} inset`,\n            outline: `1px auto ${focusBorderColor}`,\n            selectors: {\n              [HighContrastSelector]: {\n                outline: '1px solid WindowText',\n              },\n            },\n          },\n          [HighContrastSelector]: {\n            // For IE high contrast mode\n            borderBottom: 'none',\n          },\n        },\n      },\n      isButton && {\n        background: 'none',\n        backgroundColor: 'transparent',\n        border: 'none',\n        cursor: 'pointer',\n        display: 'inline',\n        margin: 0,\n        overflow: 'inherit',\n        padding: 0,\n        textAlign: 'left',\n        textOverflow: 'inherit',\n        userSelect: 'text',\n        borderBottom: '1px solid transparent', // For Firefox high contrast mode\n        selectors: {\n          [HighContrastSelectorBlack]: {\n            color: '#FFFF00',\n          },\n          [HighContrastSelectorWhite]: {\n            color: '#00009F',\n          },\n        },\n      },\n\n      isDisabled && [\n        'is-disabled',\n        {\n          color: linkDisabledColor,\n          cursor: 'default',\n        },\n        {\n          selectors: {\n            '&:link, &:visited': {\n              pointerEvents: 'none',\n            },\n          },\n        },\n      ],\n      !isDisabled && {\n        selectors: {\n          '&:active, &:hover, &:active:hover': {\n            color: linkInteractedColor,\n            textDecoration: 'underline',\n          },\n          '&:focus': {\n            color: linkColor,\n          },\n        },\n      },\n      classNames.root,\n      className,\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { LinkBase } from './Link.base';\nimport { ILinkProps, ILinkStyleProps, ILinkStyles } from './Link.types';\nimport { getStyles } from './Link.styles';\n\nexport const Link: React.FunctionComponent<ILinkProps> = styled<ILinkProps, ILinkStyleProps, ILinkStyles>(\n  LinkBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Link',\n  },\n);\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { routes } from '../Routes';\r\nimport { Icon, Link, TooltipHost, DirectionalHint } from '@fluentui/react';\r\nimport { useTranslate } from 'react-translate';\r\n\r\nconst MenuStyled = styled.div`\r\n    \r\n`;\r\n\r\nconst MenuItemStyled = styled.div`\r\n    padding: 5px;\r\n    cursor: pointer;\r\n\r\n    /* background-color: ${props => props.isSelected && '#0078d4'}; */\r\n\r\n    a {\r\n        text-decoration: none;\r\n        width: 100%;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: ${prop => prop.isCollapsed ? 'center' : 'start'};\r\n\r\n        span {\r\n            display: ${prop => prop.isCollapsed ? 'none' : 'block'};\r\n            padding-left: 10px;\r\n            color: #605e5c;\r\n            font-size: 14px;\r\n        }\r\n\r\n        :hover {\r\n          text-decoration: none;\r\n          text-decoration: none;\r\n        }\r\n    }\r\n\r\n    :hover {\r\n        background-color: #edebe9;\r\n\r\n        /* i {\r\n            color: #ffffff;\r\n        } */\r\n    }\r\n`;\r\n\r\nconst Menu = ({ isCollapsed }) => {\r\n    const translate = useTranslate('data');\r\n\r\n    return (\r\n        <MenuStyled>\r\n            {\r\n                routes.map(route =>\r\n                    <MenuItemStyled\r\n                        key={route.name}\r\n                        isSelected={route.name}\r\n                        isCollapsed={isCollapsed}>\r\n                        <Link href={route.path}>\r\n                            <TooltipHost\r\n                                content={translate(route.title)}\r\n                                calloutProps={{ directionalHint: DirectionalHint.rightCenter}}>\r\n                                <Icon style={{\r\n                                    fontSize: isCollapsed ? 28 : 22,\r\n                                }}\r\n                                    iconName={route.iconName} />\r\n                            </TooltipHost>\r\n                            <span>{translate(route.title)}</span>\r\n                        </Link>\r\n                    </MenuItemStyled>\r\n                )\r\n            }\r\n        </MenuStyled>\r\n    )\r\n}\r\n\r\n\r\nexport default Menu;"],"sourceRoot":""}